set-option -g prefix C-q
unbind C-b

# In a nested session, use C-i as prefix.
# Have to push "prefix + C-i + ..."
# E.g.: C-q + C-i + n (next pane)
# bind-key C-i send-prefix
# Another solution, is to use only one key for the nested session.
# For that, use "-n" to bind in the root table.
# E.g.: M-q + n
bind-key -n M-q send-prefix
################################################################################
# Terminal
################################################################################
# Check this setting if there is an issue with the support of truecolor.
# set-option -sa terminal-overrides ',xterm-256color:RGB'

# Informs tmux that the  terminal emulator support 256 colors.
# Sets the value of TERM within Tmux.
# Use screen-256color for the widest compatibility.
set-option -g default-terminal "screen-256color"
################################################################################
# Bindings
################################################################################
bind-key r source-file ~/.tmux.conf \; display "Tmux's configuration reloaded."

bind-key o set-option status

# When synchronization is turned on, what is written is a given pane, will be
# send to all other panes in the window.
bind-key a set-window-option synchronize-panes

# Clears the screen
bind-key C-l send-keys -R

bind-key b choose-buffer
unbind "#"

bind-key C-q last-window

bind-key -r p previous-window
bind-key -r n next-window
# bind-key -r p select-window -t :-
# bind-key -r n select-window -t :+

bind-key | split-window -h
bind-key - split-window -v
unbind '"'
unbind %

# New pane/window within the same cwd.
bind-key '\' split-window -h -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"
bind-key v new-window  -c "#{pane_current_path}"

bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# Resizes panes
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

bind-key -r "<" swap-window -d -t -1
bind-key -r ">" swap-window -d -t +1

# Has strange behaviour.
# bind P pipe-pane -o "cat >>~/#W.log"\; display "Toggled logging to ~/#W.log"

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection

if-shell "uname | grep -q Linux" {
	# Requires xsel to be installed.
	# Prefix + C-c and Prefix + C-v to interact with the system clipboard.
	bind C-c run "tmux save-buffer - | xsel --clipboard"
	bind C-v run 'tmux set-buffer "$(xsel)"; tmux paste-buffer'
} {
	# Might work on some version of MacOS.
	# bind C-c run "tmux save-buffer - | pbcopy"

	# Set the default command to execute for new windows.
	# This allows us to use pbcopy and pbpaste with tmux.
	# Ex:
	# 	tmux show-buffer | pbcopy
	# 	tmux set-buffer $(pbpaste); tmux paste-buffer
	# Requires "reattach-to-user-namespace"
	# set -g default-command "reattach-to-user-namespace -l /bin/bash"
	bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
	bind C-v run 'tmux set-buffer "$(reattach-to-user-namespace pbpaste)"; tmux paste-buffer'
}

# Might be used to fix keyboard issues.
# If the command after if-shell succeeds, it will execute the first block.
# Otherwise, it will execute the second.
# if-shell "uname | grep -q Darwin" {
#   bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
#   bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
# } {
#   bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
#   bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# }
################################################################################
# Status line
################################################################################
set-option -g base-index 1
setw -g pane-base-index 1

# don't rename windows automatically
set-option -g allow-rename off

# Current window in the status line.
setw -g window-status-current-style fg=white,bold,bg=red

# active pane normal, others are gray
setw -g window-style fg=white,bg=colour235
# setw -g window-style fg=white,bg=colour17
setw -g window-active-style fg=white,bg=black

setw -g pane-border-style fg=green,bg=black
set-option -g pane-active-border-style 'fg=colour51'
set-option -g status-style fg=white,bg=black

# Command / message line
set-option -g message-style fg=white,bold,bg=black

# enable activity alerts
# monitor-activity highlights the window
setw -g monitor-activity on
# visual-activity shows a message in the status line
set-option -g visual-activity on

# Updates the  number of thew windows when a window is removed
set-option -g renumber-windows on

# Center the window list in the status line
set-option -g status-justify centre
################################################################################
# By default, the size of the window is constrained to the smallest client
# attached to that session even if he is not watching the given window.
# aggressive-resize makes the constraint applicaple only to the active window.
setw -g aggressive-resize on

# Enable mouse mode (tmux 4.1 and above)
set-option -g mouse on

set-option -g default-shell /bin/bash

# Use Emacs mode in the status line.
set-option -g status-keys emacs

# Use Vi in copy mode.
set-window-option -g mode-keys vi

set-option -g status on

#setting the delay between prefix and command
# A high value might be a problem for applications like Vim.
set-option -s escape-time 1

# tmux messages are displayed for 4 seconds
set-option -g display-time 4000

# increase scrollback buffer size
set-option -g history-limit 50000
################################################################################
# vim-tmux-navigator
################################################################################
# The meta key is not well supported by Vim and ctrl keys are used by readline.
################################################################################
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n M-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
# bind-key -n M-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
# bind-key -n M-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
# bind-key -n M-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n M-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# bind-key -T copy-mode-vi M-h select-pane -L
# bind-key -T copy-mode-vi M-j select-pane -D
# bind-key -T copy-mode-vi M-k select-pane -U
# bind-key -T copy-mode-vi M-l select-pane -R
# bind-key -T copy-mode-vi M-\ select-pane -l
################################################################################
# TPM
################################################################################
set-option -g @plugin 'tmux-plugins/tpm'

set-option -g @plugin 'tmux-plugins/tmux-resurrect'
# tmux-resurrect will restore the contents of the panes.
set-option -g @resurrect-capture-pane-contents 'on'

set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @continuum-restore 'on'

# If the system clipboard is still not working, this pluggin might help.
# Note: Check the depedencies required to handle the system clipboard.
# set -g @plugin 'tmux-plugins/tmux-yank'

set-option -g @plugin 'Morantron/tmux-fingers'
# The fuzzy search window takes too much room on the screen. It might hide some
# links.
# set -g @plugin 'wfxr/tmux-fzf-url'

set-option -g @plugin 'laktak/extrakto'
set-option -g @plugin 'tmux-plugins/tmux-sessionist'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
